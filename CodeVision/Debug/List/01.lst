
AVRASM ver. 2.1.30  C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm Mon Aug 05 09:35:28 2019

C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _t=R5
                 	.DEF _i=R4
                 	.DEF __lcd_x=R7
                 	.DEF __lcd_y=R6
                 	.DEF __lcd_maxx=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004a 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1125): warning: .cseg .db misalignment - padding zero byte
00002a 0000      	.DB  0x0
                 
                 _0x3:
00002b 063f
00002c 4f5b
00002d 6d66
00002e 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002f 6f7f      	.DB  0x7F,0x6F
                 _0x0:
000030 6572
000031 0064
000032 6579
000033 6c6c      	.DB  0x72,0x65,0x64,0x0,0x79,0x65,0x6C,0x6C
000034 776f
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1132): warning: .cseg .db misalignment - padding zero byte
000035 0000      	.DB  0x6F,0x77,0x0
                 _0x2000003:
000036 c080      	.DB  0x80,0xC0
                 _0x2020060:
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1136): warning: .cseg .db misalignment - padding zero byte
000037 0001      	.DB  0x1
                 _0x2020000:
000038 4e2d
000039 4e41
00003a 4900
00003b 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
C:\Users\FRP.NIK\Desktop\Å—ÊéÂ\CodeVision\Debug\List\01.asm(1139): warning: .cseg .db misalignment - padding zero byte
00003c 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
00003d 0001      	.DW  0x01
00003e 0004      	.DW  0x04
00003f 0054      	.DW  __REG_VARS*2
                 
000040 000a      	.DW  0x0A
000041 0260      	.DW  _sevenSeg
000042 0056      	.DW  _0x3*2
                 
000043 0002      	.DW  0x02
000044 026a      	.DW  __base_y_G100
000045 006c      	.DW  _0x2000003*2
                 
000046 0001      	.DW  0x01
000047 026e      	.DW  __seed_G101
000048 006e      	.DW  _0x2020060*2
                 
                 _0xFFFFFFFF:
000049 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004a 94f8      	CLI
00004b 27ee      	CLR  R30
00004c bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00004d e0f1      	LDI  R31,1
00004e bffb      	OUT  GICR,R31
00004f bfeb      	OUT  GICR,R30
000050 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000051 e08d      	LDI  R24,(14-2)+1
000052 e0a2      	LDI  R26,2
000053 27bb      	CLR  R27
                 __CLEAR_REG:
000054 93ed      	ST   X+,R30
000055 958a      	DEC  R24
000056 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000057 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000058 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000059 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005a 93ed      	ST   X+,R30
00005b 9701      	SBIW R24,1
00005c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00005d e7ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00005e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00005f 9185      	LPM  R24,Z+
000060 9195      	LPM  R25,Z+
000061 9700      	SBIW R24,0
000062 f061      	BREQ __GLOBAL_INI_END
000063 91a5      	LPM  R26,Z+
000064 91b5      	LPM  R27,Z+
000065 9005      	LPM  R0,Z+
000066 9015      	LPM  R1,Z+
000067 01bf      	MOVW R22,R30
000068 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000069 9005      	LPM  R0,Z+
00006a 920d      	ST   X+,R0
00006b 9701      	SBIW R24,1
00006c f7e1      	BRNE __GLOBAL_INI_LOOP
00006d 01fb      	MOVW R30,R22
00006e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00006f e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000070 bfed      	OUT  SPL,R30
000071 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000072 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000073 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000074 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000075 940c 0077 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 7/25/2019
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega32
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 512
                 ;*******************************************************/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <alcd.h>
                 ;#include <stdlib.h>
                 ;unsigned char sevenSeg [10] = {0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
                 
                 	.DSEG
                 ;unsigned char t,i = 0;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0022 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0023 // Declare your local variables here
                 ; 0000 0024 
                 ; 0000 0025 // Input/Output Ports initialization
                 ; 0000 0026 // Port A initialization
                 ; 0000 0027 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0028 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000077 e0ef      	LDI  R30,LOW(15)
000078 bbea      	OUT  0x1A,R30
                 ; 0000 0029 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 002A PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000079 e0e0      	LDI  R30,LOW(0)
00007a bbeb      	OUT  0x1B,R30
                 ; 0000 002B 
                 ; 0000 002C // Port B initialization
                 ; 0000 002D // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 002E DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
00007b bbe7      	OUT  0x17,R30
                 ; 0000 002F // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0030 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00007c bbe8      	OUT  0x18,R30
                 ; 0000 0031 
                 ; 0000 0032 // Port C initialization
                 ; 0000 0033 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0034 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
00007d efef      	LDI  R30,LOW(255)
00007e bbe4      	OUT  0x14,R30
                 ; 0000 0035 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0036 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00007f e0e0      	LDI  R30,LOW(0)
000080 bbe5      	OUT  0x15,R30
                 ; 0000 0037 
                 ; 0000 0038 // Port D initialization
                 ; 0000 0039 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 003A DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000081 efef      	LDI  R30,LOW(255)
000082 bbe1      	OUT  0x11,R30
                 ; 0000 003B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 003C PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000083 e0e0      	LDI  R30,LOW(0)
000084 bbe2      	OUT  0x12,R30
                 ; 0000 003D 
                 ; 0000 003E // Timer/Counter 0 initialization
                 ; 0000 003F // Clock source: System Clock
                 ; 0000 0040 // Clock value: Timer 0 Stopped
                 ; 0000 0041 // Mode: Normal top=0xFF
                 ; 0000 0042 // OC0 output: Disconnected
                 ; 0000 0043 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000085 bfe3      	OUT  0x33,R30
                 ; 0000 0044 TCNT0=0x00;
000086 bfe2      	OUT  0x32,R30
                 ; 0000 0045 OCR0=0x00;
000087 bfec      	OUT  0x3C,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 1 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock value: Timer1 Stopped
                 ; 0000 004A // Mode: Normal top=0xFFFF
                 ; 0000 004B // OC1A output: Disconnected
                 ; 0000 004C // OC1B output: Disconnected
                 ; 0000 004D // Noise Canceler: Off
                 ; 0000 004E // Input Capture on Falling Edge
                 ; 0000 004F // Timer1 Overflow Interrupt: Off
                 ; 0000 0050 // Input Capture Interrupt: Off
                 ; 0000 0051 // Compare A Match Interrupt: Off
                 ; 0000 0052 // Compare B Match Interrupt: Off
                 ; 0000 0053 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000088 bdef      	OUT  0x2F,R30
                 ; 0000 0054 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
000089 bdee      	OUT  0x2E,R30
                 ; 0000 0055 TCNT1H=0x00;
00008a bded      	OUT  0x2D,R30
                 ; 0000 0056 TCNT1L=0x00;
00008b bdec      	OUT  0x2C,R30
                 ; 0000 0057 ICR1H=0x00;
00008c bde7      	OUT  0x27,R30
                 ; 0000 0058 ICR1L=0x00;
00008d bde6      	OUT  0x26,R30
                 ; 0000 0059 OCR1AH=0x00;
00008e bdeb      	OUT  0x2B,R30
                 ; 0000 005A OCR1AL=0x00;
00008f bdea      	OUT  0x2A,R30
                 ; 0000 005B OCR1BH=0x00;
000090 bde9      	OUT  0x29,R30
                 ; 0000 005C OCR1BL=0x00;
000091 bde8      	OUT  0x28,R30
                 ; 0000 005D 
                 ; 0000 005E // Timer/Counter 2 initialization
                 ; 0000 005F // Clock source: System Clock
                 ; 0000 0060 // Clock value: Timer2 Stopped
                 ; 0000 0061 // Mode: Normal top=0xFF
                 ; 0000 0062 // OC2 output: Disconnected
                 ; 0000 0063 ASSR=0<<AS2;
000092 bde2      	OUT  0x22,R30
                 ; 0000 0064 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000093 bde5      	OUT  0x25,R30
                 ; 0000 0065 TCNT2=0x00;
000094 bde4      	OUT  0x24,R30
                 ; 0000 0066 OCR2=0x00;
000095 bde3      	OUT  0x23,R30
                 ; 0000 0067 
                 ; 0000 0068 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0069 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000096 bfe9      	OUT  0x39,R30
                 ; 0000 006A 
                 ; 0000 006B // External Interrupt(s) initialization
                 ; 0000 006C // INT0: Off
                 ; 0000 006D // INT1: Off
                 ; 0000 006E // INT2: Off
                 ; 0000 006F MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000097 bfe5      	OUT  0x35,R30
                 ; 0000 0070 MCUCSR=(0<<ISC2);
000098 bfe4      	OUT  0x34,R30
                 ; 0000 0071 
                 ; 0000 0072 // USART initialization
                 ; 0000 0073 // USART disabled
                 ; 0000 0074 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000099 b9ea      	OUT  0xA,R30
                 ; 0000 0075 
                 ; 0000 0076 // Analog Comparator initialization
                 ; 0000 0077 // Analog Comparator: Off
                 ; 0000 0078 // The Analog Comparator's positive input is
                 ; 0000 0079 // connected to the AIN0 pin
                 ; 0000 007A // The Analog Comparator's negative input is
                 ; 0000 007B // connected to the AIN1 pin
                 ; 0000 007C ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00009a e8e0      	LDI  R30,LOW(128)
00009b b9e8      	OUT  0x8,R30
                 ; 0000 007D SFIOR=(0<<ACME);
00009c e0e0      	LDI  R30,LOW(0)
00009d bfe0      	OUT  0x30,R30
                 ; 0000 007E 
                 ; 0000 007F // ADC initialization
                 ; 0000 0080 // ADC disabled
                 ; 0000 0081 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
00009e b9e6      	OUT  0x6,R30
                 ; 0000 0082 
                 ; 0000 0083 // SPI initialization
                 ; 0000 0084 // SPI disabled
                 ; 0000 0085 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
00009f b9ed      	OUT  0xD,R30
                 ; 0000 0086 
                 ; 0000 0087 // TWI initialization
                 ; 0000 0088 // TWI disabled
                 ; 0000 0089 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a0 bfe6      	OUT  0x36,R30
                 ; 0000 008A        lcd_init(16);
0000a1 e1a0      	LDI  R26,LOW(16)
0000a2 d0f3      	RCALL _lcd_init
                 ; 0000 008B while (1)
                 _0x4:
                 ; 0000 008C       {
                 ; 0000 008D        char buffer[];
                 ; 0000 008E        unsigned char f = 0;
                 ; 0000 008F       unsigned char j = 1;
                 ; 0000 0090       // Place your code here
                 ; 0000 0091       if(PINA == 16){
0000a3 9722      	SBIW R28,2
0000a4 e0e1      	LDI  R30,LOW(1)
0000a5 83e8      	ST   Y,R30
0000a6 e0e0      	LDI  R30,LOW(0)
0000a7 83e9      	STD  Y+1,R30
                 ;	buffer -> Y+2
                 ;	f -> Y+1
                 ;	j -> Y+0
0000a8 b3e9      	IN   R30,0x19
0000a9 31e0      	CPI  R30,LOW(0x10)
0000aa f499      	BRNE _0x7
                 ; 0000 0092       for(t=0;t<60;t++){
0000ab 2455      	CLR  R5
                 _0x9:
0000ac e3ec      	LDI  R30,LOW(60)
0000ad 165e      	CP   R5,R30
0000ae f468      	BRSH _0xA
                 ; 0000 0093       PORTA = 1;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 940e 01f2 	CALL SUBOPT_0x0
                 ; 0000 0094         itoa(t,buffer);
                 ; 0000 0095       lcd_gotoxy(3,0);
                 ; 0000 0096       lcd_putsf("red");
                +
0000b2 e6a0     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000b3 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000b4 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 0097        lcd_gotoxy(0,1);
                 ; 0000 0098       lcd_puts(buffer);
                 ; 0000 0099       delay_ms(500);
                 ; 0000 009A 
                 ; 0000 009B       if(PINA != 1){
0000b6 30e1      	CPI  R30,LOW(0x1)
0000b7 f011      	BREQ _0xB
                 ; 0000 009C        lcd_clear();
0000b8 d09a      	RCALL _lcd_clear
                 ; 0000 009D        break;
0000b9 c002      	RJMP _0xA
                 ; 0000 009E       }
                 ; 0000 009F       }
                 _0xB:
0000ba 9453      	INC  R5
0000bb cff0      	RJMP _0x9
                 _0xA:
                 ; 0000 00A0         lcd_clear();
0000bc d096      	RCALL _lcd_clear
                 ; 0000 00A1       }
                 ; 0000 00A2       else PORTA = 0;
0000bd c002      	RJMP _0xC
                 _0x7:
0000be e0e0      	LDI  R30,LOW(0)
0000bf bbeb      	OUT  0x1B,R30
                 ; 0000 00A3       if(PINA == 32){
                 _0xC:
0000c0 b3e9      	IN   R30,0x19
0000c1 32e0      	CPI  R30,LOW(0x20)
0000c2 f499      	BRNE _0xD
                 ; 0000 00A4        for(t=0;t<10;t++){
0000c3 2455      	CLR  R5
                 _0xF:
0000c4 e0ea      	LDI  R30,LOW(10)
0000c5 165e      	CP   R5,R30
0000c6 f468      	BRSH _0x10
                 ; 0000 00A5       PORTA = 2;
0000c7 e0e2      	LDI  R30,LOW(2)
0000c8 940e 01f2 	CALL SUBOPT_0x0
                 ; 0000 00A6         itoa(t,buffer);
                 ; 0000 00A7       lcd_gotoxy(3,0);
                 ; 0000 00A8       lcd_putsf("yellow");
                +
0000ca e6a4     +LDI R26 , LOW ( 2 * _0x0 + ( 4 ) )
0000cb e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW2FN _0x0,4
0000cc 940e 0200 	CALL SUBOPT_0x1
                 ; 0000 00A9        lcd_gotoxy(0,1);
                 ; 0000 00AA       lcd_puts(buffer);
                 ; 0000 00AB       delay_ms(500);
                 ; 0000 00AC 
                 ; 0000 00AD       if(PINA != 2){
0000ce 30e2      	CPI  R30,LOW(0x2)
0000cf f011      	BREQ _0x11
                 ; 0000 00AE        lcd_clear();
0000d0 d082      	RCALL _lcd_clear
                 ; 0000 00AF        break;
0000d1 c002      	RJMP _0x10
                 ; 0000 00B0       }
                 ; 0000 00B1       }
                 _0x11:
0000d2 9453      	INC  R5
0000d3 cff0      	RJMP _0xF
                 _0x10:
                 ; 0000 00B2       lcd_clear();
0000d4 d07e      	RCALL _lcd_clear
                 ; 0000 00B3       }
                 ; 0000 00B4       else PORTA = 0;
0000d5 c002      	RJMP _0x12
                 _0xD:
0000d6 e0e0      	LDI  R30,LOW(0)
0000d7 bbeb      	OUT  0x1B,R30
                 ; 0000 00B5       if(PINA == 64){
                 _0x12:
0000d8 b3e9      	IN   R30,0x19
0000d9 34e0      	CPI  R30,LOW(0x40)
0000da f009      	BREQ PC+2
0000db c045      	RJMP _0x13
                 ; 0000 00B6       PORTC = 0;
0000dc e0e0      	LDI  R30,LOW(0)
0000dd bbe5      	OUT  0x15,R30
                 ; 0000 00B7       PORTD = 0;
0000de bbe2      	OUT  0x12,R30
                 ; 0000 00B8       for(t=0;t<4;t++){
0000df 2455      	CLR  R5
                 _0x15:
0000e0 e0e4      	LDI  R30,LOW(4)
0000e1 165e      	CP   R5,R30
0000e2 f5e8      	BRSH _0x16
                 ; 0000 00B9       if(j==5){
0000e3 81a8      	LD   R26,Y
0000e4 30a5      	CPI  R26,LOW(0x5)
0000e5 f431      	BRNE _0x17
                 ; 0000 00BA       delay_ms(500);
0000e6 efa4      	LDI  R26,LOW(500)
0000e7 e0b1      	LDI  R27,HIGH(500)
0000e8 940e 021f 	CALL _delay_ms
                 ; 0000 00BB       j=0;
0000ea e0e0      	LDI  R30,LOW(0)
0000eb 83e8      	ST   Y,R30
                 ; 0000 00BC       }
                 ; 0000 00BD       for(i=0;i<10;i++){
                 _0x17:
0000ec 2444      	CLR  R4
                 _0x19:
0000ed e0ea      	LDI  R30,LOW(10)
0000ee 164e      	CP   R4,R30
0000ef f520      	BRSH _0x1A
                 ; 0000 00BE       PORTA = 4;
0000f0 e0e4      	LDI  R30,LOW(4)
0000f1 bbeb      	OUT  0x1B,R30
                 ; 0000 00BF       PORTD = sevenSeg [i];
0000f2 2de4      	MOV  R30,R4
0000f3 e0f0      	LDI  R31,0
0000f4 5ae0      	SUBI R30,LOW(-_sevenSeg)
0000f5 4ffd      	SBCI R31,HIGH(-_sevenSeg)
0000f6 81e0      	LD   R30,Z
0000f7 bbe2      	OUT  0x12,R30
                 ; 0000 00C0       delay_ms(500);
0000f8 efa4      	LDI  R26,LOW(500)
0000f9 e0b1      	LDI  R27,HIGH(500)
0000fa 940e 021f 	CALL _delay_ms
                 ; 0000 00C1       if(i==9){
0000fc e0e9      	LDI  R30,LOW(9)
0000fd 15e4      	CP   R30,R4
0000fe f461      	BRNE _0x1B
                 ; 0000 00C2       PORTC = sevenSeg [j];
0000ff 81e8      	LD   R30,Y
000100 e0f0      	LDI  R31,0
000101 5ae0      	SUBI R30,LOW(-_sevenSeg)
000102 4ffd      	SBCI R31,HIGH(-_sevenSeg)
000103 81e0      	LD   R30,Z
000104 bbe5      	OUT  0x15,R30
                 ; 0000 00C3       PORTD = sevenSeg [0];
000105 91e0 0260 	LDS  R30,_sevenSeg
000107 bbe2      	OUT  0x12,R30
                 ; 0000 00C4       j++;
000108 81e8      	LD   R30,Y
000109 5fef      	SUBI R30,-LOW(1)
00010a 83e8      	ST   Y,R30
                 ; 0000 00C5       }
                 ; 0000 00C6 
                 ; 0000 00C7       if(PINA != 4){
                 _0x1B:
00010b b3e9      	IN   R30,0x19
00010c 30e4      	CPI  R30,LOW(0x4)
00010d f021      	BREQ _0x1C
                 ; 0000 00C8       f++;
00010e 81e9      	LDD  R30,Y+1
00010f 5fef      	SUBI R30,-LOW(1)
000110 83e9      	STD  Y+1,R30
                 ; 0000 00C9 
                 ; 0000 00CA        break;
000111 c002      	RJMP _0x1A
                 ; 0000 00CB       }
                 ; 0000 00CC       }
                 _0x1C:
000112 9443      	INC  R4
000113 cfd9      	RJMP _0x19
                 _0x1A:
                 ; 0000 00CD       if(f == 1){
000114 81a9      	LDD  R26,Y+1
000115 30a1      	CPI  R26,LOW(0x1)
000116 f439      	BRNE _0x1D
                 ; 0000 00CE       f--;
000117 81e9      	LDD  R30,Y+1
000118 50e1      	SUBI R30,LOW(1)
000119 83e9      	STD  Y+1,R30
                 ; 0000 00CF       PORTC = 0;
00011a e0e0      	LDI  R30,LOW(0)
00011b bbe5      	OUT  0x15,R30
                 ; 0000 00D0       PORTD = 0;
00011c bbe2      	OUT  0x12,R30
                 ; 0000 00D1        break;
00011d c002      	RJMP _0x16
                 ; 0000 00D2       }
                 ; 0000 00D3       }
                 _0x1D:
00011e 9453      	INC  R5
00011f cfc0      	RJMP _0x15
                 _0x16:
                 ; 0000 00D4       }
                 ; 0000 00D5       else PORTA = 0;
000120 c002      	RJMP _0x1E
                 _0x13:
000121 e0e0      	LDI  R30,LOW(0)
000122 bbeb      	OUT  0x1B,R30
                 ; 0000 00D6 }
                 _0x1E:
000123 9622      	ADIW R28,2
000124 cf7e      	RJMP _0x4
                 ; 0000 00D7 }
                 _0x1F:
000125 cfff      	RJMP _0x1F
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
000126 93aa      	ST   -Y,R26
000127 b3e8      	IN   R30,0x18
000128 70ef      	ANDI R30,LOW(0xF)
000129 2fae      	MOV  R26,R30
00012a 81e8      	LD   R30,Y
00012b 7fe0      	ANDI R30,LOW(0xF0)
00012c 2bea      	OR   R30,R26
00012d bbe8      	OUT  0x18,R30
                +
00012e e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00012f 958a     +DEC R24
000130 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000131 9ac2      	SBI  0x18,2
                +
000132 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000133 958a     +DEC R24
000134 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000135 98c2      	CBI  0x18,2
                +
000136 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000137 958a     +DEC R24
000138 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000139 c088      	RJMP _0x20A0001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
00013a 93aa      	ST   -Y,R26
00013b 81a8      	LD   R26,Y
00013c dfe9      	RCALL __lcd_write_nibble_G100
00013d 81e8          ld    r30,y
00013e 95e2          swap  r30
00013f 83e8          st    y,r30
000140 81a8      	LD   R26,Y
000141 dfe4      	RCALL __lcd_write_nibble_G100
                +
000142 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000143 958a     +DEC R24
000144 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000145 c07c      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000146 93aa      	ST   -Y,R26
000147 81e8      	LD   R30,Y
000148 e0f0      	LDI  R31,0
000149 59e6      	SUBI R30,LOW(-__base_y_G100)
00014a 4ffd      	SBCI R31,HIGH(-__base_y_G100)
00014b 81e0      	LD   R30,Z
00014c 81a9      	LDD  R26,Y+1
00014d 0fae      	ADD  R26,R30
00014e dfeb      	RCALL __lcd_write_data
00014f 8079      	LDD  R7,Y+1
000150 8068      	LDD  R6,Y+0
000151 9622      	ADIW R28,2
000152 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000153 e0a2      	LDI  R26,LOW(2)
000154 940e 0211 	CALL SUBOPT_0x2
000156 e0ac      	LDI  R26,LOW(12)
000157 dfe2      	RCALL __lcd_write_data
000158 e0a1      	LDI  R26,LOW(1)
000159 940e 0211 	CALL SUBOPT_0x2
00015b e0e0      	LDI  R30,LOW(0)
00015c 2e6e      	MOV  R6,R30
00015d 2e7e      	MOV  R7,R30
00015e 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00015f 93aa      	ST   -Y,R26
000160 81a8      	LD   R26,Y
000161 30aa      	CPI  R26,LOW(0xA)
000162 f011      	BREQ _0x2000005
000163 1479      	CP   R7,R9
000164 f048      	BRLO _0x2000004
                 _0x2000005:
000165 e0e0      	LDI  R30,LOW(0)
000166 93ea      	ST   -Y,R30
000167 9463      	INC  R6
000168 2da6      	MOV  R26,R6
000169 dfdc      	RCALL _lcd_gotoxy
00016a 81a8      	LD   R26,Y
00016b 30aa      	CPI  R26,LOW(0xA)
00016c f409      	BRNE _0x2000007
00016d c054      	RJMP _0x20A0001
                 _0x2000007:
                 _0x2000004:
00016e 9473      	INC  R7
00016f 9ac0      	SBI  0x18,0
000170 81a8      	LD   R26,Y
000171 dfc8      	RCALL __lcd_write_data
000172 98c0      	CBI  0x18,0
000173 c04e      	RJMP _0x20A0001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000174 93ba      	ST   -Y,R27
000175 93aa      	ST   -Y,R26
000176 931a      	ST   -Y,R17
                 _0x2000008:
000177 81a9      	LDD  R26,Y+1
000178 81ba      	LDD  R27,Y+1+1
000179 91ed      	LD   R30,X+
00017a 83a9      	STD  Y+1,R26
00017b 83ba      	STD  Y+1+1,R27
00017c 2f1e      	MOV  R17,R30
00017d 30e0      	CPI  R30,0
00017e f019      	BREQ _0x200000A
00017f 2fa1      	MOV  R26,R17
000180 dfde      	RCALL _lcd_putchar
000181 cff5      	RJMP _0x2000008
                 _0x200000A:
000182 c010      	RJMP _0x20A0002
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
000183 93ba      	ST   -Y,R27
000184 93aa      	ST   -Y,R26
000185 931a      	ST   -Y,R17
                 _0x200000B:
000186 81e9      	LDD  R30,Y+1
000187 81fa      	LDD  R31,Y+1+1
000188 9631      	ADIW R30,1
000189 83e9      	STD  Y+1,R30
00018a 83fa      	STD  Y+1+1,R31
00018b 9731      	SBIW R30,1
00018c 91e4      	LPM  R30,Z
00018d 2f1e      	MOV  R17,R30
00018e 30e0      	CPI  R30,0
00018f f019      	BREQ _0x200000D
000190 2fa1      	MOV  R26,R17
000191 dfcd      	RCALL _lcd_putchar
000192 cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x20A0002:
000193 8118      	LDD  R17,Y+0
000194 9623      	ADIW R28,3
000195 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000196 93aa      	ST   -Y,R26
000197 b3e7      	IN   R30,0x17
000198 6fe0      	ORI  R30,LOW(0xF0)
000199 bbe7      	OUT  0x17,R30
00019a 9aba      	SBI  0x17,2
00019b 9ab8      	SBI  0x17,0
00019c 9ab9      	SBI  0x17,1
00019d 98c2      	CBI  0x18,2
00019e 98c0      	CBI  0x18,0
00019f 98c1      	CBI  0x18,1
0001a0 8098      	LDD  R9,Y+0
0001a1 81e8      	LD   R30,Y
0001a2 58e0      	SUBI R30,-LOW(128)
                +
0001a3 93e0 026c+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
0001a5 81e8      	LD   R30,Y
0001a6 54e0      	SUBI R30,-LOW(192)
                +
0001a7 93e0 026d+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
0001a9 e1a4      	LDI  R26,LOW(20)
0001aa e0b0      	LDI  R27,0
0001ab 940e 021f 	CALL _delay_ms
0001ad 940e 0217 	CALL SUBOPT_0x3
0001af 940e 0217 	CALL SUBOPT_0x3
0001b1 940e 0217 	CALL SUBOPT_0x3
0001b3 e2a0      	LDI  R26,LOW(32)
0001b4 df71      	RCALL __lcd_write_nibble_G100
                +
0001b5 ec88     +LDI R24 , LOW ( 200 )
0001b6 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0001b7 9701     +SBIW R24 , 1
0001b8 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0001b9 e2a8      	LDI  R26,LOW(40)
0001ba df7f      	RCALL __lcd_write_data
0001bb e0a4      	LDI  R26,LOW(4)
0001bc df7d      	RCALL __lcd_write_data
0001bd e8a5      	LDI  R26,LOW(133)
0001be df7b      	RCALL __lcd_write_data
0001bf e0a6      	LDI  R26,LOW(6)
0001c0 df79      	RCALL __lcd_write_data
0001c1 df91      	RCALL _lcd_clear
                 _0x20A0001:
0001c2 9621      	ADIW R28,1
0001c3 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _itoa:
                 ; .FSTART _itoa
0001c4 93ba      	ST   -Y,R27
0001c5 93aa      	ST   -Y,R26
0001c6 91a9          ld   r26,y+
0001c7 91b9          ld   r27,y+
0001c8 91e9          ld   r30,y+
0001c9 91f9          ld   r31,y+
0001ca 9630          adiw r30,0
0001cb f42a          brpl __itoa0
0001cc 95e0          com  r30
0001cd 95f0          com  r31
0001ce 9631          adiw r30,1
0001cf e26d          ldi  r22,'-'
0001d0 936d          st   x+,r22
                 __itoa0:
0001d1 94e8          clt
0001d2 e180          ldi  r24,low(10000)
0001d3 e297          ldi  r25,high(10000)
0001d4 d00d          rcall __itoa1
0001d5 ee88          ldi  r24,low(1000)
0001d6 e093          ldi  r25,high(1000)
0001d7 d00a          rcall __itoa1
0001d8 e684          ldi  r24,100
0001d9 2799          clr  r25
0001da d007          rcall __itoa1
0001db e08a          ldi  r24,10
0001dc d005          rcall __itoa1
0001dd 2f6e          mov  r22,r30
0001de d010          rcall __itoa5
0001df 2766          clr  r22
0001e0 936c          st   x,r22
0001e1 9508          ret
                 
                 __itoa1:
0001e2 2766          clr	 r22
                 __itoa2:
0001e3 17e8          cp   r30,r24
0001e4 07f9          cpc  r31,r25
0001e5 f020          brlo __itoa3
0001e6 9563          inc  r22
0001e7 1be8          sub  r30,r24
0001e8 0bf9          sbc  r31,r25
0001e9 f7c9          brne __itoa2
                 __itoa3:
0001ea 2366          tst  r22
0001eb f411          brne __itoa4
0001ec f016          brts __itoa5
0001ed 9508          ret
                 __itoa4:
0001ee 9468          set
                 __itoa5:
0001ef 5d60          subi r22,-0x30
0001f0 936d          st   x+,r22
0001f1 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _sevenSeg:
000260           	.BYTE 0xA
                 __base_y_G100:
00026a           	.BYTE 0x4
                 __seed_G101:
00026e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x0:
0001f2 bbeb      	OUT  0x1B,R30
0001f3 2de5      	MOV  R30,R5
0001f4 e0f0      	LDI  R31,0
0001f5 93fa      	ST   -Y,R31
0001f6 93ea      	ST   -Y,R30
0001f7 01de      	MOVW R26,R28
0001f8 9614      	ADIW R26,4
0001f9 940e 01c4 	CALL _itoa
0001fb e0e3      	LDI  R30,LOW(3)
0001fc 93ea      	ST   -Y,R30
0001fd e0a0      	LDI  R26,LOW(0)
0001fe 940c 0146 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x1:
000200 940e 0183 	CALL _lcd_putsf
000202 e0e0      	LDI  R30,LOW(0)
000203 93ea      	ST   -Y,R30
000204 e0a1      	LDI  R26,LOW(1)
000205 940e 0146 	CALL _lcd_gotoxy
000207 01de      	MOVW R26,R28
000208 9612      	ADIW R26,2
000209 940e 0174 	CALL _lcd_puts
00020b efa4      	LDI  R26,LOW(500)
00020c e0b1      	LDI  R27,HIGH(500)
00020d 940e 021f 	CALL _delay_ms
00020f b3e9      	IN   R30,0x19
000210 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000211 940e 013a 	CALL __lcd_write_data
000213 e0a3      	LDI  R26,LOW(3)
000214 e0b0      	LDI  R27,0
000215 940c 021f 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3:
000217 e3a0      	LDI  R26,LOW(48)
000218 940e 0126 	CALL __lcd_write_nibble_G100
                +
00021a ec88     +LDI R24 , LOW ( 200 )
00021b e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
00021c 9701     +SBIW R24 , 1
00021d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
00021e 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00021f 9610      	adiw r26,0
000220 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000221 ed80     +LDI R24 , LOW ( 0x7D0 )
000222 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000223 9701     +SBIW R24 , 1
000224 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000225 95a8      	wdr
000226 9711      	sbiw r26,1
000227 f7c9      	brne __delay_ms0
                 __delay_ms1:
000228 9508      	ret
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   4 r1 :   1 r2 :   0 r3 :   0 r4 :   5 r5 :  10 r6 :   4 r7 :   4 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   7 r18:   0 r19:   0 r20:   0 r21:   0 r22:  12 r23:   0 
r24:  27 r25:  10 r26:  57 r27:  15 r28:   8 r29:   1 r30: 170 r31:  17 
x  :   7 y  :  58 z  :  11 
Registers used: 20 out of 35 (57.1%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   1 
adiw  :  10 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   9 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  19 brpl  :   1 brsh  :   4 brtc  :   0 
brts  :   1 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  19 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   9 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   7 cpc   :   1 cpi   :  12 cpse  :   0 dec   :   5 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   7 inc   :   7 jmp   :  24 ld    :  21 ldd   :  12 ldi   :  87 
lds   :   1 lpm   :   9 lsl   :   0 lsr   :   0 mov   :  11 movw  :   5 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   1 out   :  54 pop   :   0 push  :   0 rcall :  24 ret   :  10 
reti  :   0 rjmp  :  22 rol   :   0 ror   :   0 sbc   :   1 sbci  :   3 
sbi   :   5 sbic  :   0 sbis  :   0 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  28 std   :   7 sts   :   2 sub   :   1 subi  :   9 swap  :   1 
tst   :   1 wdr   :   1 
Instructions used: 48 out of 116 (41.4%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000452   1042     64   1106   32768   3.4%
[.dseg] 0x000060 0x000272      0     18     18    2048   0.9%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
